import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get already_register => "Already register";
  String get app_name => "Flutter Note";
  String get delete => "Delete";
  String get edit => "Edit";
  String get edit_note => "Edit note";
  String get email_err => "email is invalid";
  String get email_is_invalid => "Email is invalid!";
  String get emall_address => "Emall Address";
  String get forget_passwd => "Forget the password?";
  String get go_to_trash => "Go to Trash";
  String get input_passwd => "Please input a password";
  String get input_passwd_again => "Please input passwd again";
  String get input_password => "Please input a password";
  String get login => "Login";
  String get network_err => "Network Err!";
  String get no_account => "No account?  ";
  String get note_removed => "Note is dismissed";
  String get password => "Password";
  String get password_inconsistency => "Password inconsistency, please confirm!";
  String get password_is_invalid => "Password is invalid!";
  String get preview => "Preview";
  String get register => "Register";
  String get register_success => "Register Success!";
  String get restore => "Restore";
  String get retrieve_password => "Retrieve Password";
  String get save_success => "Save Success!";
  String get settings => "Settings";
  String get the_account_with_password_was_not_found => "The account with password was not found.";
  String get the_email_has_been_registed => "The Email has been registed!";
  String get top_register => "Register";
  String get trash => "Trash";
  String get undefined => "Undefined";
  String get undo => "undo";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get preview => "预览";
  @override
  String get the_email_has_been_registed => "邮箱已被注册!";
  @override
  String get already_register => "已有账号";
  @override
  String get register_success => "注册成功!";
  @override
  String get edit_note => "编辑笔记";
  @override
  String get top_register => "点击注册";
  @override
  String get input_password => "清输入密码";
  @override
  String get login => "登陆";
  @override
  String get delete => "删除";
  @override
  String get network_err => "网络错误";
  @override
  String get undefined => "未编辑";
  @override
  String get emall_address => "邮箱地址";
  @override
  String get undo => "撤销";
  @override
  String get save_success => "保存成功!";
  @override
  String get password => "密码";
  @override
  String get input_passwd => "请输入密码";
  @override
  String get settings => "设置";
  @override
  String get password_inconsistency => "密码不一致，请确认！";
  @override
  String get restore => "恢复";
  @override
  String get edit => "编辑";
  @override
  String get email_err => "请输入正确的邮箱地址";
  @override
  String get email_is_invalid => "邮箱地址无效!";
  @override
  String get password_is_invalid => "密码无效，请重新输入!";
  @override
  String get trash => "回收站";
  @override
  String get input_passwd_again => "清再次输入密码";
  @override
  String get app_name => "我的笔记";
  @override
  String get no_account => "没有账号？ ";
  @override
  String get forget_passwd => "忘记密码？";
  @override
  String get retrieve_password => "找回密码";
  @override
  String get note_removed => "笔记已删除";
  @override
  String get go_to_trash => "回收站";
  @override
  String get the_account_with_password_was_not_found => "账号或密码错误！";
  @override
  String get register => "注册";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        case "zh_CN":
          return SynchronousFuture<S>(const $zh_CN());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
